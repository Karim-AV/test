name: Sanity Tests - On Demand
on:
  workflow_dispatch:
    inputs:
        environment:
            description: 'Environment to run tests against'
            required: true
            default: 'prod'
            type: choice
            options:
                - 'prod'
                - 'stage'
                - 'dev'

        reason:
            description: 'Reason for running the workflow'
            required: true
            default: 'Manual run'
            type: string


        ALLURE_JOB_RUN_ID:
          description: "ALLURE_JOB_RUN_ID is service parameter required for triggering workflows from Allure Testops. Leave blank."
          required: false


env:
  ALLURE_TOKEN: ${{ secrets.ALLURE_TOKEN }}
  ALLURE_JOB_RUN_ID: ${{ github.event.inputs.ALLURE_JOB_RUN_ID }}
  ALLURE_ENDPOINT: https://findco.testops.cloud/
  ALLURE_PROJECT_ID: 34
  ALLURE_RESULTS: allure-results
  PRODUCT_VERSION: ${{ github.event.inputs.PRODUCT_VERSION }}
  TESTS_BROWSER: ${{ github.event.inputs.TESTS_BROWSER }}

run-name: "Sanity Tests - On Demand - ${{ inputs.environment }} - ${{ inputs.reason }}"

jobs:
  download-allure-ctl:
    runs-on: ubuntu-latest
    permissions: write-all
    outputs:
      allure-ci-env: ${{ steps.setup-allure-env.outputs.allure-ci-env }}
    steps:
      - uses: actions/checkout@v3
      - name: install and configure allurectl
        uses: allure-framework/setup-allurectl@v1
      - name: setup allure env
        id: setup-allure-env
        run: echo "allure-ci-env=$(bin/allurectl ci env --encode)" >> $GITHUB_OUTPUT

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Cache node_modules
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: |
            node_modules
          key: modules-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci
      - name: Run lint
        run: npm run lint        

  sanity-tests:
    needs: [ lint, download-allure-ctl ]
    if: success()
    timeout-minutes: 60
    permissions: write-all
    runs-on: ubuntu-latest-m

    env:
      ALLURE_CI_ENV: ${{needs.DownloadAllureCtl.outputs.allure-ci-env}}

    strategy:
      fail-fast: false
      matrix:
        shardIndex: [ 1, 2, 3, 4, 5, 6 ]
        shardTotal: [ 6 ]

    steps:

      - name: Set Environment and Reason
        run: |
          if [ "${{ github.event.workflow_run.name }}" == "Deployment for CM Staging Server" ]; then
            echo "Environment=stage" >> $GITHUB_ENV
            echo "Reason=Staging Deployment" >> $GITHUB_ENV
          elif [ "${{ github.event.workflow_run.name }}" == "Deployment for CM Development Server" ]; then
            echo "Environment=dev" >> $GITHUB_ENV
            echo "Reason=Dev Deployment" >> $GITHUB_ENV
          elif [ "${{ github.event.workflow_run.name }}" == "Deployment for CM Production Server" ]; then
            echo "Environment=prod" >> $GITHUB_ENV
            echo "Reason=Prod Deployment" >> $GITHUB_ENV
          else
            echo "Environment=default-value" >> $GITHUB_ENV
            echo "Reason=Unknown" >> $GITHUB_ENV
          fi

      - name: Display Environment and Reason
        run: |
          echo "Environment: ${{ env.Environment }}"
          echo "Reason: ${{ env.Reason }}"
          
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18      

      - name: Cache node_modules
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: |
            node_modules
          key: modules-${{ hashFiles('package-lock.json') }}

      - name: Cache Playwright binaries
        uses: actions/cache@v4
        id: cache-playwright
        with:
          path: |
            ~/.cache/ms-playwright
          key: playwright-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci
      - name: Install Playwright browsers
        if: steps.cache-playwright.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Install and configure allurectl
        uses: allure-framework/setup-allurectl@v1

      - name: Run Playwright tests
        env:
          BYPASS_AUTH: ${{ secrets.BYPASS_AUTH }}
          SLACK_BOT_USER_OAUTH_TOKEN: ${{ secrets.SLACK_BOT_USER_OAUTH_TOKEN }}
          DEV_USER: ${{ secrets.DEV_USER }}
          DEV_PASS: ${{ secrets.DEV_PASS }}
        run: |
          export ALLURE_CI_ENV="${ALLURE_CI_ENV}"
          allurectl watch -- npm run test:local:sanity:${{ inputs.environment || 'prod' }}:en -- --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}
          export $(allurectl job-run env)
          
      - name: Display allure-results folder after tests
        if: always()
        run: ls -R allure-results

      - name: Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4.3.1
        with:
          name: allure-results-${{ matrix.shardIndex }}
          path: allure-results
          retention-days: 1

      - name: Upload blob report to GitHub Actions Artifacts
        if: always()
        uses: actions/upload-artifact@v4.3.1
        with:
          name: blob-report-${{ matrix.shardIndex }}
          path: blob-report
          retention-days: 1

  deploy-report:
    needs: [ sanity-tests ]
    if: always()
    timeout-minutes: 15
    runs-on: ubuntu-latest

    permissions:
      # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
      contents: read   # to read the artifact
      packages: write  # to upload the artifact
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

      # Required for deploy-pages action
      actions: read

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install dependencies
        run: npm ci

      - name: Install allurectl
        uses: allure-framework/setup-allurectl@v1
        with:
          allure-endpoint: ${{ env.ALLURE_ENDPOINT }}
          allure-token: ${{ secrets.ALLURE_TOKEN }}
          allure-project-id: ${{ env.ALLURE_PROJECT_ID }}

      - name: Set ALLURE_CI_ENV
        run: |
          ALLURE_CI_ENV=$(allurectl ci env --encode)
          echo "ALLURE_CI_ENV=${ALLURE_CI_ENV}" >> $GITHUB_ENV

      - name: Download Allure Reports from GitHub Actions Artifacts
        uses: actions/download-artifact@v4
        with:
          path: allure-results
          pattern: allure-results-*
          merge-multiple: true

      - name: Generate Allure Report
        run: |
          export ALLURE_CI_ENV="${ALLURE_CI_ENV}"          
          allurectl upload --launch-name "Dwane test" ${ALLURE_RESULTS}
          

      - name: Send Slack Notification
        if: ${{ (success() || failure()) && github.event_name == 'workflow_dispatch' }}
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              attachments: [{
                color: '${{ needs.sanity-tests.result }}' === 'success' ? 'good' : '${{ needs.sanity-tests.result }}' === 'failure' ? 'danger' : 'warning',
                text: `Cryptomaniaks Sanity Tests - Production Site - ${{ github.event_name }}`,
                fields: [
                  { title: 'Report', value: 'https://findco.testops.cloud/jobrun/${{ env.ALLURE_JOB_RUN_URL }} |View Report>', short: false }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.DWANE_WEBHOOK_URL }} # required

      - name: Download blob reports from GitHub Actions Artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-blob-reports
          pattern: blob-report-*
          merge-multiple: true

      - name: Download blob reports from GitHub Actions Artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-blob-reports        
          pattern: blob-report-*
          merge-multiple: true

      - name: Merge into HTML Report
        run: |
          npx playwright merge-reports --reporter html ./all-blob-reports

      - name: Upload HTML report
        uses: actions/upload-artifact@v4.3.1
        if: success() || failure()
        with:
          name: playwright-report
          path: playwright-report/

      - name: Delete Sharded Artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            blob-report-*
          failOnError: false

